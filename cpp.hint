// Les fichiers hint permettent à l'IDE Visual Studio d'interpréter les identificateurs Visual C++
// tels que les noms de fonctions et de macros.
// Pour plus d'informations, consultez https://go.microsoft.com/fwlink/?linkid=865984
#define Q_PROPERTY(__VA_ARGS__) QT_ANNOTATE_CLASS(qt_property, __VA_ARGS__)
#define Q_PROPERTY(text) Q_PROPERTY(text)
#define Q_OBJECT public: QT_WARNING_PUSH Q_OBJECT_NO_OVERRIDE_WARNING static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); QT_TR_FUNCTIONS private: Q_OBJECT_NO_ATTRIBUTES_WARNING Q_DECL_HIDDEN_STATIC_METACALL static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); QT_WARNING_POP struct QPrivateSignal { explicit QPrivateSignal() = default; }; QT_ANNOTATE_CLASS(qt_qobject, "")
#define Q_OBJECT
#define slots
// Les fichiers hint permettent à l'IDE Visual Studio d'interpréter les identificateurs Visual C++
// tels que les noms de fonctions et de macros.
// Pour plus d'informations, consultez https://go.microsoft.com/fwlink/?linkid=865984
#define QT_END_NAMESPACE
#define QT_END_NAMESPACE }
#define Q_ENUM(x) Q_ENUMS(x) Q_ENUM_IMPL(x)
#define Q_ENUM(x) Q_ENUM(x)
